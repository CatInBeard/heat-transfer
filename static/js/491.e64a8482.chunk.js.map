{"version":3,"file":"static/js/491.e64a8482.chunk.js","mappings":"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","sources":["matrix.tsx","../node_modules/big.js/big.mjs","computeHeatTransfer.tsx","computeTransitiveWorker.js"],"sourcesContent":["type LU = {\n    lower: number[][],\n    upper: number[][]\n}\n\nconst transposeMatrix = (matrix: number[][]): number[][] => {\n    let transposedMatrix: number[][] = [];\n\n    for (let i = 0; i < matrix[0].length; i++) {\n        transposedMatrix[i] = [];\n        for (let j = 0; j < matrix.length; j++) {\n            transposedMatrix[i].push(matrix[j][i]);\n        }\n    }\n\n    return transposedMatrix;\n}\n\nconst SumMatrix = (A: number[][], B: number[][]): number[][] => {\n\n    let C = new Array(A[0].length);\n\n    for (let i = 0; i < A.length; i++) {\n        C[i] = new Array(A[0].length);\n        for (let j = 0; j < A[0].length; j++) {\n            C[i][j] = A[i][j] + B[i][j];\n        }\n    }\n\n    return C;\n}\n\nconst SumVector = (A: number[], B: number[]): number[] => {\n\n    let C = new Array(A.length);\n\n    for (let i = 0; i < A.length; i++) {\n        C[i] = A[i] + B[i];\n    }\n\n    return C;\n}\n\nconst MultiplyMatrix = (A: number[][], B: number[][]): number[][] => {\n    const rows1 = A.length;\n    const cols1 = A[0].length;\n    const cols2 = B[0].length;\n\n    if (cols1 !== B.length) {\n        throw new Error(\"The number of columns in the first matrix must match the number of rows in the second matrix.\");\n    }\n\n    const C: number[][] = [];\n\n    for (let i = 0; i < rows1; i++) {\n        C[i] = [];\n        for (let j = 0; j < cols2; j++) {\n            let sum = 0;\n            for (let k = 0; k < cols1; k++) {\n                sum += A[i][k] * B[k][j];\n            }\n            C[i][j] = sum;\n        }\n    }\n\n    return C;\n}\n\nconst MultiplyMatrixByVector = (A: number[][], v: number[]): number[] => {\n    const rows = A.length;\n    const cols = A[0].length;\n\n    if (cols !== v.length) {\n        throw new Error(\"The number of columns in the matrix must match the length of the vector.\");\n    }\n\n    const result: number[] = [];\n\n    for (let i = 0; i < rows; i++) {\n        let sum = 0;\n        for (let j = 0; j < cols; j++) {\n            sum += A[i][j] * v[j];\n        }\n        result[i] = sum;\n    }\n\n    return result;\n}\n\nconst multiplyMatrixByNumber = (matrix: number[][], number: number): number[][] => {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n\n    const result: number[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n        result[i] = [];\n        for (let j = 0; j < cols; j++) {\n            result[i][j] = matrix[i][j] * number;\n        }\n    }\n\n    return result;\n}\n\nconst multiplyVectorByNumber = (matrix: number[], number: number): number[] => {\n\n    const result: number[] = [];\n\n    for (let i = 0; i < matrix.length; i++) {\n        result[i] = matrix[i] * number;\n    }\n\n    return result;\n}\n\nconst InverseMatrix = (A: number[][]) => { // LU inverse matrix\n    if (A.length != A[0].length) {\n        throw new Error(\"The matrix is not square\");\n    }\n\n    const n = A.length;\n    const identity = Array(n);\n    const inverse = Array(n);\n\n    for (let i = 0; i < n; i++) {\n        identity[i] = [];\n        inverse[i] = [];\n        for (let j = 0; j < n; j++) {\n            identity[i][j] = (i === j) ? 1 : 0;\n            inverse[i][j] = 0;\n        }\n    }\n\n    let LU = luDecomposition(A);\n\n    for (let k = 0; k < n; k++) {\n        const y = Array(n);\n        const b = Array(n);\n        for (let i = 0; i < n; i++) {\n            y[i] = 0;\n            b[i] = identity[i][k];\n            for (let j = 0; j < i; j++) {\n                y[i] += (LU.lower[i][j] * y[j]);\n            }\n            y[i] = (b[i] - y[i]) / LU.lower[i][i];\n        }\n        for (let i = n - 1; i >= 0; i--) {\n            inverse[i][k] = y[i];\n            for (let j = i + 1; j < n; j++) {\n                inverse[i][k] -= (LU.upper[i][j] * inverse[j][k]);\n            }\n            inverse[i][k] = inverse[i][k] / LU.upper[i][i];\n        }\n    }\n\n    return inverse;\n\n}\n\nconst luDecomposition = (matrix: number[][]): LU => {\n    const n = matrix.length;\n    const lower = Array(n);\n    const upper = Array(n);\n\n    for (let i = 0; i < n; i++) {\n        lower[i] = [];\n        upper[i] = [];\n        for (let j = 0; j < n; j++) {\n            lower[i][j] = 0;\n            upper[i][j] = 0;\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        for (let k = i; k < n; k++) {\n            let sum = 0;\n            for (let j = 0; j < i; j++) {\n                sum += (lower[i][j] * upper[j][k]);\n            }\n            upper[i][k] = matrix[i][k] - sum;\n        }\n\n        for (let k = i; k < n; k++) {\n            if (i === k) {\n                lower[i][i] = 1;\n            } else {\n                let sum = 0;\n                for (let j = 0; j < i; j++) {\n                    sum += (lower[k][j] * upper[j][i]);\n                }\n                lower[k][i] = (matrix[k][i] - sum) / upper[i][i];\n            }\n        }\n    }\n\n    return { lower: lower, upper: upper };\n}\n\nconst solveLinearEquationSystem = (A: number[][], b: number[]): number[] => {\n    const LU = luDecomposition(A);\n    const n = A.length;\n    const y: number[] = [];\n    const x: number[] = [];\n\n    for (let i = 0; i < n; i++) {\n        let sum = 0;\n        for (let j = 0; j < i; j++) {\n            sum += LU.lower[i][j] * y[j];\n        }\n        y[i] = (b[i] - sum) / LU.lower[i][i];\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n        let sum = 0;\n        for (let j = i + 1; j < n; j++) {\n            sum += LU.upper[i][j] * x[j];\n        }\n        x[i] = (y[i] - sum) / LU.upper[i][i];\n    }\n\n    return x;\n}\n\nconst Determinant = (matrix: number[][]): number => {\n    if (matrix.length !== matrix[0].length) {\n        throw new Error(\"Matrix must be square\");\n    }\n\n    if (matrix.length === 1) {\n        return matrix[0][0];\n    }\n\n    if (matrix.length === 2) {\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n    }\n\n    let det = 0;\n\n    for (let i = 0; i < matrix.length; i++) {\n        det += matrix[0][i] * cofactor(matrix, 0, i);\n    }\n\n    return det;\n}\n\nconst cofactor = (matrix: number[][], row: number, col: number): number => {\n    const subMatrix = matrix.filter((_, r) => r !== row).map(row => row.filter((_, c) => c !== col));\n    const sign = (row + col) % 2 === 0 ? 1 : -1;\n    \n    return sign * Determinant(subMatrix);\n}\n\nconst frobeniusNorm = (matrix: number[][]): number => {\n    let sum = 0;\n    \n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = 0; j < matrix[i].length; j++) {\n            sum += matrix[i][j] ** 2;\n        }\n    }\n    \n    return Math.sqrt(sum);\n}\n\n\n\nexport { transposeMatrix, SumMatrix, MultiplyMatrixByVector, multiplyVectorByNumber, SumVector, MultiplyMatrix, InverseMatrix, multiplyMatrixByNumber, solveLinearEquationSystem, Determinant, frobeniusNorm }","/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n  /*\r\n   * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n   * primitive number without a loss of precision.\r\n   */\r\n  STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      if (typeof n !== 'string') {\r\n        if (Big.strict === true && typeof n !== 'bigint') {\r\n          throw TypeError(INVALID + 'value');\r\n        }\r\n\r\n        // Minus zero?\r\n        n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n      }\r\n\r\n      parse(x, n);\r\n    }\r\n\r\n    // Retain a reference to this Big constructor.\r\n    // Shadow Big.prototype.constructor which points to Object.\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.strict = STRICT;\r\n  Big.roundDown = 0;\r\n  Big.roundHalfUp = 1;\r\n  Big.roundHalfEven = 2;\r\n  Big.roundUp = 3;\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  if (!NUMERIC.test(n)) {\r\n    throw Error(INVALID + 'number');\r\n  }\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n *\r\n * x {Big} The Big to round.\r\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, sd, rm, more) {\r\n  var xc = x.c;\r\n\r\n  if (rm === UNDEFINED) rm = x.constructor.RM;\r\n  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  if (sd < 1) {\r\n    more =\r\n      rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n      rm === 1 && xc[0] >= 5 ||\r\n      rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n    );\r\n\r\n    xc.length = 1;\r\n\r\n    if (more) {\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      x.e = x.e - sd + 1;\r\n      xc[0] = 1;\r\n    } else {\r\n\r\n      // Zero.\r\n      xc[0] = x.e = 0;\r\n    }\r\n  } else if (sd < xc.length) {\r\n\r\n    // xc[sd] is the digit after the digit that may be rounded up.\r\n    more =\r\n      rm === 1 && xc[sd] >= 5 ||\r\n      rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n        (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n      rm === 3 && (more || !!xc[0]);\r\n\r\n    // Remove any digits after the required precision.\r\n    xc.length = sd;\r\n\r\n    // Round up?\r\n    if (more) {\r\n\r\n      // Rounding up may mean the previous digit has to be rounded up.\r\n      for (; ++xc[--sd] > 9;) {\r\n        xc[sd] = 0;\r\n        if (sd === 0) {\r\n          ++x.e;\r\n          xc.unshift(1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (sd = xc.length; !xc[--sd];) xc.pop();\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n */\r\nfunction stringify(x, doExponential, isNonzero) {\r\n  var e = x.e,\r\n    s = x.c.join(''),\r\n    n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (doExponential) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) {\r\n      for (e -= n; e--;) s += '0';\r\n    } else if (e < n) {\r\n      s = s.slice(0, e) + '.' + s.slice(e);\r\n    }\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && isNonzero ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n */\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) {\r\n    y.s = k;\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n  q.s = k;\r\n  k = p < 0 ? 0 : p;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n    p--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (yc[0]) {\r\n      y.s = -b;\r\n    } else if (xc[0]) {\r\n      y = new Big(x);\r\n    } else {\r\n      y.s = 1;\r\n    }\r\n    return y;\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big negated.\r\n */\r\nP.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var e, k, t,\r\n    x = this,\r\n    Big = x.constructor;\r\n\r\n  y = new Big(y);\r\n\r\n  // Signs differ?\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (!yc[0]) {\r\n      if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = x.s;\r\n      }\r\n    }\r\n    return y;\r\n  }\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (e = xe - ye) {\r\n    if (e > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      e = -e;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; e--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  e = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (k) {\r\n    xc.unshift(k);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor('1'),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n    throw Error(INVALID + 'exponent');\r\n  }\r\n\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.prec = function (sd, rm) {\r\n  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n    throw Error(INVALID + 'precision');\r\n  }\r\n  return round(new this.constructor(this), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n * using rounding mode rm, or Big.RM if rm is not specified.\r\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.round = function (dp, rm) {\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n  return round(new this.constructor(this), dp + this.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big('0.5');\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) {\r\n    throw Error(NAME + 'No square root');\r\n  }\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s + '');\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) {\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = b;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), ++dp, rm);\r\n    for (; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, true, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n    // x.e may have changed if the value is rounded up.\r\n    for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, false, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toJSON = P.toString = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Big as a primitve number.\r\n */\r\nP.toNumber = function () {\r\n  var n = Number(stringify(this, true, true));\r\n  if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n    throw Error(NAME + 'Imprecise conversion');\r\n  }\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * rounding mode rm, or Big.RM if rm is not specified.\r\n * Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    n = x.c[0];\r\n\r\n  if (sd !== UNDEFINED) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    x = round(new Big(x), sd, rm);\r\n    for (; x.c.length < sd;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  if (Big.strict === true) {\r\n    throw Error(NAME + 'valueOf disallowed');\r\n  }\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\r\nexport default Big;\r\n","import { transposeMatrix, MultiplyMatrix, MultiplyMatrixByVector, SumVector, multiplyVectorByNumber, solveLinearEquationSystem, multiplyMatrixByNumber, InverseMatrix, Determinant, SumMatrix, frobeniusNorm } from \"./matrix.tsx\";\nimport { Nset, Lset, Section, TemperatureBC } from \"./inpParse\"\nimport { multiplyMatrixByNumberBig, SumVectorBig, multiplyVectorByNumberBig, MultiplyMatrixByVectorBig, solveLinearEquationSystemBig } from \"./bigMatrix.ts\"\nimport Big from 'big.js';\n\n\nconst computeTransitive = (inpData, temperature_BC, blocks_termal_conductivity, blocks_density, blocks_capacity, progress_callback) => {\n\n    Big.DP = 60;\n\n    // let useBig = true;\n    let useBig = false;\n\n    let timeStep = 0.1;\n\n    let freq = 1 / timeStep;\n    let steps = 5000;\n\n    let K: number[][] = getConductivityMatrixTransitive(inpData, blocks_termal_conductivity);\n    \n    let C: number[][] = getCapacityMatrix(inpData, blocks_density, blocks_capacity);\n\n\n    K = applyTemperatureBCToKTransitive(K, inpData);\n\n\n    let F: number[] = getFForTransitive(K, inpData);\n\n    K = applyTemperatureBCToKTransitiveStep2(K, inpData);\n\n\n    if (progress_callback === null) {\n        progress_callback = (progress, data) => {\n            console.log(\"progress: \" + progress + \"%\")\n        }\n    }\n\n    let temperaturePrevStep: number[] = [];\n    let temperatureCurrentStep: number[] = [];\n\n    for (let i = 0; i < F.length; i++) {\n        temperaturePrevStep.push(0);\n    }\n    temperaturePrevStep = fixTemperatureFromBC(temperaturePrevStep, inpData, temperature_BC)\n\n    let temperatureFrames: number[][] = [];\n\n    temperatureFrames.push(temperaturePrevStep);\n\n    let progress = 0;\n\n\n    if(useBig){\n        let bigC = floatMatrixToBig(C);\n        let bigK = floatMatrixToBig(K);\n        let bigFreq = new Big(freq);\n        let bigF = floatVectorToBig(F);\n        let bigTemperaturePrevStep = floatVectorToBig(temperaturePrevStep);\n        let bigTemperatureCurrentStep: Big[] = [];\n\n        for (let t = 0; t < steps; t++) {\n\n\n            let A = multiplyMatrixByNumberBig(bigC, bigFreq)\n            let b = SumVectorBig(\n                SumVectorBig(bigF, multiplyVectorByNumberBig(\n                    MultiplyMatrixByVectorBig(bigK, bigTemperaturePrevStep), new Big(-1))),\n                multiplyVectorByNumberBig(\n                    MultiplyMatrixByVectorBig(bigC, bigTemperaturePrevStep), bigFreq))\n\n            let Temperature = solveLinearEquationSystemBig(A, b)\n\n            bigTemperatureCurrentStep = fixTemperatureFromBCBig(Temperature, inpData, temperature_BC)\n\n            let vector = BigVectorToFloat(bigTemperatureCurrentStep)\n            temperatureFrames.push(vector);\n            bigTemperaturePrevStep = bigTemperatureCurrentStep;\n\n            progress += 100 / steps\n            progress_callback(progress, vector)\n        }\n    }\n    else{\n        for (let t = 0; t < steps; t++) {\n\n\n            let A = multiplyMatrixByNumber(C, freq)\n            let b = SumVector(\n                SumVector(F, multiplyVectorByNumber(\n                    MultiplyMatrixByVector(K, temperaturePrevStep), -1)),\n                multiplyVectorByNumber(\n                    MultiplyMatrixByVector(C, temperaturePrevStep), freq))\n\n            let Temperature = solveLinearEquationSystem(A, b)\n\n            temperatureCurrentStep = fixTemperatureFromBC(Temperature, inpData, temperature_BC)\n\n            temperatureFrames.push(temperatureCurrentStep);\n            temperaturePrevStep = temperatureCurrentStep;\n            \n            progress += 100 / steps\n            progress_callback(progress, temperatureCurrentStep)\n        }\n    }\n\n\n    return temperatureFrames;\n\n}\n\n\nconst computeSteadyState = (inpData, temperature_BC, blocks_termal_conductivity) => {\n\n    let K = getConductivityMatrix(inpData, blocks_termal_conductivity);\n\n    K = applyTemperatureBC(K, inpData);\n\n    let F = getTermalForcesFromBC(inpData, temperature_BC);\n\n    let temperatures = fixTemperatureFromBC(solveLinearEquationSystem(K, F), inpData, temperature_BC);\n\n    return temperatures\n\n}\n\nconst floatVectorToBig = (F: number[]): Big[] => {\n    let bigF: Big[] = [];\n    for (let i = 0; i < F.length; i++) {\n        bigF[i] = new Big(F[i]);\n    }\n    return bigF;\n}\n\nconst BigVectorToFloat = (bigF: Array<Big>): number[] => {\n    let F: number[] = [];\n    for (let i = 0; i < bigF.length; i++) {\n        F[i] = bigF[i].toNumber()\n    }\n    return F;\n}\n\nconst floatMatrixToBig = (A: number[][]): Big[][] => {\n    let bigA: Big[][] = [];\n    for (let i = 0; i < A.length; i++) {\n        bigA[i] = [];\n        for (let j = 0; j < A.length; j++) {\n            bigA[i][j] = new Big(A[i][j]);\n        }\n    }\n    return bigA;\n}\n\n\nconst getTermalForcesFromBC = (inpData, temperature_BC): number[] => {\n    let length = inpData.problemData[0].nodes.length;\n\n    let F: number[] = Array(length);\n    for (let i = 0; i < length; i++) {\n        F[i] = 0;\n    }\n\n    for (let i = 0; i < temperature_BC.length; i++) {\n        let BC: TemperatureBC = temperature_BC[i];\n\n        let nodes: number[] = getNodesByAssemblySetName(BC.setName, inpData);\n\n        for (let i = 0; i < nodes.length; i++) {\n            let node: number = nodes[i];\n            F[node - 1] = BC.temperature;\n        }\n\n    }\n\n    return F;\n}\n\nconst getNodesByAssemblySetName = (setName: string, inpData): number[] => {\n\n    let nset: Nset | undefined = inpData[\"assembly\"].nsets.find((nset: Nset) => {\n        return nset.setname == setName\n    });\n    if (!nset) {\n        throw new Error(\"Set not found\")\n    }\n\n    return nset.nodes\n}\n\n\nconst applyTemperatureBC = (K: Array<Array<number>>, inpData): Array<Array<number>> => {\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            for (let i = 0; i < K.length; i++) {\n                K[node - 1][i] = 0\n            }\n            K[node - 1][node - 1] = 1\n        })\n    });\n\n\n    return K;\n}\n\nconst applyTemperatureBCToKTransitive = (K: Array<Array<number>>, inpData): Array<Array<number>> => {\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            for (let i = 0; i < K.length; i++) {\n                if (i != node - 1) {\n                    K[node - 1][i] = 0\n                }\n            }\n        })\n    });\n\n    return K;\n}\n\nconst applyTemperatureBCToKTransitiveStep2 = (K: Array<Array<number>>, inpData): Array<Array<number>> => {\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            for (let i = 0; i < K.length; i++) {\n                if (i != node - 1) {\n                    K[i][node - 1] = 0\n                }\n            }\n        })\n    });\n\n    return K;\n}\n\nconst getFForTransitive = (K: Array<Array<number>>, inpData): number[] => {\n    let F: number[] = [];\n\n    for (let i = 0; i < K.length; i++) {\n        F.push(0);\n    }\n\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            F[node - 1] = K[node - 1][node - 1] * temperature.temperature;\n            for (let i = 0; i < F.length; i++) {\n                if (i != node - 1) {\n                    F[i] -= K[i][node - 1] * temperature.temperature;\n                }\n            }\n        })\n    });\n\n\n    return F;\n}\n\nconst getConductivityByElement = (element: number, blocks_termal_conductivity, lsets: Lset[], sections: Section[]): number => {\n\n    let lset = lsets.find((elset) => {\n        return elset.elements.indexOf(element) != -1;\n    })\n    if (!lset) {\n        throw new Error(\"Element not in elset\");\n    }\n    let lsetName: string = lset.setname;\n    let section = sections.find((section) => {\n        return section.elsetName == lsetName\n    })\n    if (!section) {\n        throw new Error(\"Elset not in section\");\n    }\n    let sectionName = section.name;\n\n    return blocks_termal_conductivity[sectionName] ?? 0;\n}\n\nconst getDensityByElement = (element: number, blocks_density, lsets: Lset[], sections: Section[]): number => {\n\n    let lset = lsets.find((elset) => {\n        return elset.elements.indexOf(element) != -1;\n    })\n    if (!lset) {\n        throw new Error(\"Element not in elset\");\n    }\n    let lsetName: string = lset.setname;\n    let section = sections.find((section) => {\n        return section.elsetName == lsetName\n    })\n    if (!section) {\n        throw new Error(\"Elset not in section\");\n    }\n    let sectionName = section.name;\n\n    return blocks_density[sectionName] ?? 0;\n}\n\nconst getCapacityByElement = (element: number, blocks_capacity, lsets: Lset[], sections: Section[]): number => {\n\n    let lset = lsets.find((elset) => {\n        return elset.elements.indexOf(element) != -1;\n    })\n    if (!lset) {\n        throw new Error(\"Element not in elset\");\n    }\n    let lsetName: string = lset.setname;\n    let section = sections.find((section) => {\n        return section.elsetName == lsetName\n    })\n    if (!section) {\n        throw new Error(\"Elset not in section\");\n    }\n    let sectionName = section.name;\n\n    return blocks_capacity[sectionName] ?? 0;\n}\n\n\nconst getConductivityMatrixTransitive = (inpData, blocks_termal_conductivity) => {\n    let nodes = inpData.problemData[0].nodes;\n    let elements = inpData.problemData[0].elements;\n\n    let K: number[][] = new Array(nodes.length);\n    for (let i = 0; i < K.length; i++) {\n        K[i] = new Array(nodes.length).fill(0);\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n\n        let conductivity = getConductivityByElement(elements[i][0], blocks_termal_conductivity, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n\n        let conductivityMatrix = [[conductivity, 0], [0, conductivity]]\n\n\n        let Xi = nodes[elements[i][1] - 1][1];\n        let Yi = nodes[elements[i][1] - 1][2];\n\n        let Xj = nodes[elements[i][2] - 1][1];\n        let Yj = nodes[elements[i][2] - 1][2];\n\n        let Xk = nodes[elements[i][3] - 1][1];\n        let Yk = nodes[elements[i][3] - 1][2];\n\n\n        let Bi: number = Yj  - Yk;\n        let Bj: number = Yk - Yi;\n        let Bk: number = Yi - Yj ;\n        let Ci: number = Xk - Xj;\n        let Cj: number = Xi - Xk;\n        let Ck: number = Xj - Xi;\n\n        let Square = 0.5 * Math.abs(Xi * (Yj - Yk) + Xj * (Yk - Yi) + Xk * (Yi - Yj))\n\n        let B: number[][] = [[Bi, Bj, Bk], [Ci, Cj, Ck]];\n\n        let Ki = multiplyMatrixByNumber(MultiplyMatrix(MultiplyMatrix(transposeMatrix(B), conductivityMatrix), B), 1 / 4 * Square)\n\n        K = accumulateToGlobalMatrix(K, Ki, elements[i][1], elements[i][2], elements[i][3]);\n\n    }\n\n    return K;\n\n}\n\n\nconst getConductivityMatrix = (inpData, blocks_termal_conductivity): Array<Array<number>> => {\n\n    let nodes = inpData.problemData[0].nodes;\n    let elements = inpData.problemData[0].elements;\n\n    let K: number[][] = new Array(nodes.length);\n    for (let i = 0; i < K.length; i++) {\n        K[i] = new Array(nodes.length).fill(0);\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n\n        let conductivity = getConductivityByElement(elements[i][0], blocks_termal_conductivity, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n        let R: number[][] = [[], [], []];\n        for (let j = 1; j <= 3; j++) {\n            R[j - 1] = [nodes[elements[i][j] - 1][1], nodes[elements[i][j] - 1][2]];\n        }\n\n        R = transposeMatrix(R);\n\n        let Ki = getLocalCondictivityMatrix(R, conductivity);\n        K = accumulateToGlobalMatrix(K, Ki, elements[i][1], elements[i][2], elements[i][3]);\n\n    }\n\n    return K;\n}\n\nconst getCapacityMatrix = (inpData, blocks_density, blocks_capacity): Array<Array<number>> => {\n\n    let nodes = inpData.problemData[0].nodes;\n    let elements = inpData.problemData[0].elements;\n\n    let C: number[][] = new Array(nodes.length);\n    for (let i = 0; i < C.length; i++) {\n        C[i] = new Array(nodes.length).fill(0);\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n\n        \n        let density = getDensityByElement(elements[i][0], blocks_density, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n        let capacity = getCapacityByElement(elements[i][0], blocks_capacity, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n        let coords: number[][] = [\n            [nodes[elements[i][1] - 1][1], nodes[elements[i][1] - 1][2]],\n            [nodes[elements[i][2] - 1][1], nodes[elements[i][2] - 1][2]],\n            [nodes[elements[i][3] - 1][1], nodes[elements[i][3] - 1][2]]\n\n        ]\n\n        let Ci = getLocalCapacityMatrix(coords, density, capacity);\n        C = accumulateToGlobalMatrix(C, Ci, elements[i][1], elements[i][2], elements[i][3]);\n\n    }\n\n    return C;\n}\n\nconst getLocalCondictivityMatrix = (coords: number[][], Lambda: number) => {\n\n    let J = [\n        [coords[0][2] - coords[0][0], coords[1][2] - coords[1][0]],\n        [coords[0][1] - coords[0][0], coords[1][1] - coords[1][0]]\n    ];\n\n    let Bnat = [\n        [-1, 0, 1],\n        [-1, 1, 0]\n    ];\n\n    let B = MultiplyMatrix(InverseMatrix(J), Bnat);\n    return MultiplyMatrix(multiplyMatrixByNumber(transposeMatrix(B), Lambda), multiplyMatrixByNumber(B, Determinant(J) / 2));\n}\n\nconst calculateTriangleArea = (coordinates: number[][]): number => {\n    const [point1, point2, point3] = coordinates;\n\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    const [x3, y3] = point3;\n\n    const area = 0.5 * Math.abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n\n    return area;\n}\n\nconst getLocalCapacityMatrix = (coords: number[][], density: number, capacity: number): number[][] => {\n\n        let Xi = coords[0][0];\n        let Yi = coords[0][1];\n\n        let Xj = coords[1][0];\n        let Yj = coords[1][1];\n\n        let Xk = coords[2][0];\n        let Yk = coords[2][1];\n\n    let square = 0.5 * Math.abs(Xi * (Yj - Yk) + Xj * (Yk - Yi) + Xk * (Yi - Yj))\n\n\n    return multiplyMatrixByNumber([\n        [2, 1, 1],\n        [1, 2, 1],\n        [1, 1, 2],\n    ], density * capacity / 12 * square )\n\n}\n\nconst accumulateToGlobalMatrix = (globalMatrix: Array<Array<number>>, localMatrix: Array<Array<number>>, i: number, j: number, k: number): Array<Array<number>> => {\n\n    i--\n    j--\n    k--\n\n    globalMatrix[i][i] += localMatrix[0][0]\n    globalMatrix[j][j] += localMatrix[1][1]\n    globalMatrix[k][k] += localMatrix[2][2]\n\n    globalMatrix[i][j] += localMatrix[0][1]\n    globalMatrix[j][i] += localMatrix[1][0]\n\n    globalMatrix[i][k] += localMatrix[0][2]\n    globalMatrix[k][i] += localMatrix[2][0]\n\n    globalMatrix[j][k] += localMatrix[1][2]\n    globalMatrix[k][j] += localMatrix[2][1]\n\n    return globalMatrix;\n}\n\nconst fixTemperatureFromBC = (temperature: number[], inpData, temperature_BC): number[] => {\n\n    for (let i = 0; i < temperature_BC.length; i++) {\n        let BC: TemperatureBC = temperature_BC[i];\n\n        let nodes: number[] = getNodesByAssemblySetName(BC.setName, inpData);\n\n        for (let i = 0; i < nodes.length; i++) {\n            let node: number = nodes[i];\n            temperature[node - 1] = BC.temperature;\n        }\n\n    }\n\n    return temperature\n}\n\nconst fixTemperatureFromBCBig = (temperature: Big[], inpData, temperature_BC): Big[] => {\n\n    for (let i = 0; i < temperature_BC.length; i++) {\n        let BC: TemperatureBC = temperature_BC[i];\n\n        let nodes: number[] = getNodesByAssemblySetName(BC.setName, inpData);\n\n        for (let i = 0; i < nodes.length; i++) {\n            let node: number = nodes[i];\n            temperature[node - 1] = new Big(BC.temperature);\n        }\n\n    }\n\n    return temperature\n}\n\n\nexport { computeSteadyState, computeTransitive }","import {computeTransitive} from \"./computeHeatTransfer.tsx\"\n\nonmessage = function(event) {\n\n    let inpData = event.data.inpData\n    let temperature_BC = event.data.temperature_BC\n    let blocks_termal_conductivity = event.data.blocks_termal_conductivity\n    let blocks_density = event.data.blocks_density\n    let blocks_specific_heat = event.data.blocks_specific_heat\n    \n    try{\n        var result = computeTransitive(inpData, temperature_BC, blocks_termal_conductivity, blocks_density, blocks_specific_heat, callback);\n    }\n    catch(e){\n        postMessage({ action: \"error\", result: e});    \n    }\n    postMessage({ action: \"done\", result: result});\n};\n\n\nconst callback = (progress, data) => {\n    postMessage({action: \"progress\", result: progress, temp: data});\n}"],"names":["transposeMatrix","matrix","transposedMatrix","i","length","j","push","SumVector","A","B","C","Array","MultiplyMatrix","rows1","cols1","cols2","Error","sum","k","MultiplyMatrixByVector","v","rows","cols","result","multiplyMatrixByNumber","number","multiplyVectorByNumber","luDecomposition","n","lower","upper","solveLinearEquationSystem","b","LU","y","x","MAX_DP","MAX_POWER","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","round","sd","rm","more","xc","c","constructor","RM","e","unshift","pop","stringify","doExponential","isNonzero","s","join","charAt","slice","abs","this","cmp","isneg","yc","l","div","Big","a","dp","DP","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","p","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","neg","add","pow","one","prec","sqrt","half","Math","toExponential","indexOf","mul","toFixed","Symbol","for","toJSON","toString","NE","PE","toNumber","Number","strict","toPrecision","valueOf","_Big_","TypeError","String","nl","test","replace","search","substring","parse","prototype","roundDown","roundHalfUp","roundHalfEven","roundUp","getNodesByAssemblySetName","setName","inpData","nset","nsets","find","setname","nodes","applyTemperatureBCToKTransitive","K","steps","boundaries","temperature","forEach","assembly","node","applyTemperatureBCToKTransitiveStep2","getFForTransitive","F","getConductivityByElement","element","blocks_termal_conductivity","lsets","sections","_blocks_termal_conduc","lset","elset","elements","lsetName","section","elsetName","name","getDensityByElement","blocks_density","_blocks_density$secti","getCapacityByElement","blocks_capacity","_blocks_capacity$sect","getConductivityMatrixTransitive","problemData","fill","conductivity","conductivityMatrix","Xi","Yi","Xj","Yj","Xk","Yk","Bi","Bj","Bk","Ci","Cj","Ck","Square","Ki","accumulateToGlobalMatrix","getCapacityMatrix","density","capacity","coords","getLocalCapacityMatrix","square","globalMatrix","localMatrix","fixTemperatureFromBC","temperature_BC","BC","onmessage","event","data","blocks_specific_heat","computeTransitive","progress_callback","progress","console","log","temperaturePrevStep","temperatureCurrentStep","temperatureFrames","Temperature","callback","postMessage","action","temp"],"sourceRoot":""}