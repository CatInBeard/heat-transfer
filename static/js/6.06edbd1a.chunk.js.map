{"version":3,"file":"static/js/6.06edbd1a.chunk.js","mappings":"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","sources":["matrix.tsx","bigMatrix.ts","computeHeatTransfer.tsx","computeTransitiveWorker.js","mathExpression.ts","table.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["type LU = {\n    lower: number[][],\n    upper: number[][]\n}\n\nconst transposeMatrix = (matrix: number[][]): number[][] => {\n    let transposedMatrix: number[][] = [];\n\n    for (let i = 0; i < matrix[0].length; i++) {\n        transposedMatrix[i] = [];\n        for (let j = 0; j < matrix.length; j++) {\n            transposedMatrix[i].push(matrix[j][i]);\n        }\n    }\n\n    return transposedMatrix;\n}\n\nconst SumMatrix = (A: number[][], B: number[][]): number[][] => {\n\n    let C = new Array(A[0].length);\n\n    for (let i = 0; i < A.length; i++) {\n        C[i] = new Array(A[0].length);\n        for (let j = 0; j < A[0].length; j++) {\n            C[i][j] = A[i][j] + B[i][j];\n        }\n    }\n\n    return C;\n}\n\nconst SumVector = (A: number[], B: number[]): number[] => {\n\n    let C = new Array(A.length);\n\n    for (let i = 0; i < A.length; i++) {\n        C[i] = A[i] + B[i];\n    }\n\n    return C;\n}\n\nconst MultiplyMatrix = (A: number[][], B: number[][]): number[][] => {\n    const rows1 = A.length;\n    const cols1 = A[0].length;\n    const cols2 = B[0].length;\n\n    if (cols1 !== B.length) {\n        throw new Error(\"The number of columns in the first matrix must match the number of rows in the second matrix.\");\n    }\n\n    const C: number[][] = [];\n\n    for (let i = 0; i < rows1; i++) {\n        C[i] = [];\n        for (let j = 0; j < cols2; j++) {\n            let sum = 0;\n            for (let k = 0; k < cols1; k++) {\n                sum += A[i][k] * B[k][j];\n            }\n            C[i][j] = sum;\n        }\n    }\n\n    return C;\n}\n\nconst MultiplyMatrixByVector = (A: number[][], v: number[]): number[] => {\n    const rows = A.length;\n    const cols = A[0].length;\n\n    if (cols !== v.length) {\n        throw new Error(\"The number of columns in the matrix must match the length of the vector.\");\n    }\n\n    const result: number[] = [];\n\n    for (let i = 0; i < rows; i++) {\n        let sum = 0;\n        for (let j = 0; j < cols; j++) {\n            sum += A[i][j] * v[j];\n        }\n        result[i] = sum;\n    }\n\n    return result;\n}\n\nconst multiplyMatrixByNumber = (matrix: number[][], number: number): number[][] => {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n\n    const result: number[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n        result[i] = [];\n        for (let j = 0; j < cols; j++) {\n            result[i][j] = matrix[i][j] * number;\n        }\n    }\n\n    return result;\n}\n\nconst multiplyVectorByNumber = (matrix: number[], number: number): number[] => {\n\n    const result: number[] = [];\n\n    for (let i = 0; i < matrix.length; i++) {\n        result[i] = matrix[i] * number;\n    }\n\n    return result;\n}\n\nconst InverseMatrix = (A: number[][]) => { // LU inverse matrix\n    if (A.length != A[0].length) {\n        throw new Error(\"The matrix is not square\");\n    }\n\n    const n = A.length;\n    const identity = Array(n);\n    const inverse = Array(n);\n\n    for (let i = 0; i < n; i++) {\n        identity[i] = [];\n        inverse[i] = [];\n        for (let j = 0; j < n; j++) {\n            identity[i][j] = (i === j) ? 1 : 0;\n            inverse[i][j] = 0;\n        }\n    }\n\n    let LU = luDecomposition(A);\n\n    for (let k = 0; k < n; k++) {\n        const y = Array(n);\n        const b = Array(n);\n        for (let i = 0; i < n; i++) {\n            y[i] = 0;\n            b[i] = identity[i][k];\n            for (let j = 0; j < i; j++) {\n                y[i] += (LU.lower[i][j] * y[j]);\n            }\n            y[i] = (b[i] - y[i]) / LU.lower[i][i];\n        }\n        for (let i = n - 1; i >= 0; i--) {\n            inverse[i][k] = y[i];\n            for (let j = i + 1; j < n; j++) {\n                inverse[i][k] -= (LU.upper[i][j] * inverse[j][k]);\n            }\n            inverse[i][k] = inverse[i][k] / LU.upper[i][i];\n        }\n    }\n\n    return inverse;\n\n}\n\nconst luDecomposition = (matrix: number[][]): LU => {\n    const n = matrix.length;\n    const lower = Array(n);\n    const upper = Array(n);\n\n    for (let i = 0; i < n; i++) {\n        lower[i] = [];\n        upper[i] = [];\n        for (let j = 0; j < n; j++) {\n            lower[i][j] = 0;\n            upper[i][j] = 0;\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        for (let k = i; k < n; k++) {\n            let sum = 0;\n            for (let j = 0; j < i; j++) {\n                sum += (lower[i][j] * upper[j][k]);\n            }\n            upper[i][k] = matrix[i][k] - sum;\n        }\n\n        for (let k = i; k < n; k++) {\n            if (i === k) {\n                lower[i][i] = 1;\n            } else {\n                let sum = 0;\n                for (let j = 0; j < i; j++) {\n                    sum += (lower[k][j] * upper[j][i]);\n                }\n                lower[k][i] = (matrix[k][i] - sum) / upper[i][i];\n            }\n        }\n    }\n\n    return { lower: lower, upper: upper };\n}\n\nconst solveLinearEquationSystem = (A: number[][], b: number[]): number[] => {\n    const LU = luDecomposition(A);\n    const n = A.length;\n    const y: number[] = [];\n    const x: number[] = [];\n\n    for (let i = 0; i < n; i++) {\n        let sum = 0;\n        for (let j = 0; j < i; j++) {\n            sum += LU.lower[i][j] * y[j];\n        }\n        y[i] = (b[i] - sum) / LU.lower[i][i];\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n        let sum = 0;\n        for (let j = i + 1; j < n; j++) {\n            sum += LU.upper[i][j] * x[j];\n        }\n        x[i] = (y[i] - sum) / LU.upper[i][i];\n    }\n\n    return x;\n}\n\nconst Determinant = (matrix: number[][]): number => {\n    if (matrix.length !== matrix[0].length) {\n        throw new Error(\"Matrix must be square\");\n    }\n\n    if (matrix.length === 1) {\n        return matrix[0][0];\n    }\n\n    if (matrix.length === 2) {\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n    }\n\n    let det = 0;\n\n    for (let i = 0; i < matrix.length; i++) {\n        det += matrix[0][i] * cofactor(matrix, 0, i);\n    }\n\n    return det;\n}\n\nconst cofactor = (matrix: number[][], row: number, col: number): number => {\n    const subMatrix = matrix.filter((_, r) => r !== row).map(row => row.filter((_, c) => c !== col));\n    const sign = (row + col) % 2 === 0 ? 1 : -1;\n    \n    return sign * Determinant(subMatrix);\n}\n\nconst frobeniusNorm = (matrix: number[][]): number => {\n    let sum = 0;\n    \n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = 0; j < matrix[i].length; j++) {\n            sum += matrix[i][j] ** 2;\n        }\n    }\n    \n    return Math.sqrt(sum);\n}\n\n\n\nexport { transposeMatrix, SumMatrix, MultiplyMatrixByVector, multiplyVectorByNumber, SumVector, MultiplyMatrix, InverseMatrix, multiplyMatrixByNumber, solveLinearEquationSystem, Determinant, frobeniusNorm }","import Big from \"big.js\";\n\ntype LUBig = {\n    lower: Big[][],\n    upper: Big[][]\n}\n\nconst multiplyMatrixByNumberBig = (matrix: Big[][], number: Big): Big[][] => {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n\n    const result: Big[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n        result[i] = [];\n        for (let j = 0; j < cols; j++) {\n            result[i][j] = matrix[i][j].mul(number);\n        }\n    }\n\n    return result;\n}\n\nconst SumVectorBig = (A: Big[], B: Big[]): Big[] => {\n\n    let C = new Array(A.length);\n\n    for (let i = 0; i < A.length; i++) {\n        C[i] = A[i].plus(B[i]);\n    }\n\n    return C;\n}\n\nconst multiplyVectorByNumberBig = (matrix: Big[], number: Big): Big[] => {\n\n    const result: Big[] = [];\n\n    for (let i = 0; i < matrix.length; i++) {\n        result[i] = matrix[i].mul(number);\n    }\n\n    return result;\n}\n\nconst MultiplyMatrixByVectorBig = (A: Big[][], v: Big[]): Big[] => {\n    const rows = A.length;\n    const cols = A[0].length;\n\n    if (cols !== v.length) {\n        throw new Error(\"The number of columns in the matrix must match the length of the vector.\");\n    }\n\n    const result: Big[] = [];\n\n    for (let i = 0; i < rows; i++) {\n        let sum =  new Big(0);\n        for (let j = 0; j < cols; j++) {\n            sum = sum.plus(A[i][j].mul(v[j]));\n        }\n        result[i] = sum;\n    }\n\n    return result;\n}\n\nconst solveLinearEquationSystemBig = (A: Big[][], b: Big[]): Big[] => {\n    const LU = luDecompositionBig(A);\n    const n = A.length;\n    const y: Big[] = [];\n    const x: Big[] = [];\n\n    for (let i = 0; i < n; i++) {\n        let sum = new Big(0);\n        for (let j = 0; j < i; j++) {\n            sum = sum.plus(LU.lower[i][j].mul(y[j]));\n        }\n        y[i] = (b[i].minus(sum)).div(LU.lower[i][i]);\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n        let sum = new Big(0);\n        for (let j = i + 1; j < n; j++) {\n            sum = sum.plus(LU.upper[i][j].mul(x[j])) ;\n        }\n        x[i] = (y[i].minus(sum)).div(LU.upper[i][i]);\n    }\n\n    return x;\n}\n\nconst luDecompositionBig = (matrix: Big[][]): LUBig => {\n    const n = matrix.length;\n    const lower = Array(n);\n    const upper = Array(n);\n\n    for (let i = 0; i < n; i++) {\n        lower[i] = [];\n        upper[i] = [];\n        for (let j = 0; j < n; j++) {\n            lower[i][j] = new Big(0);\n            upper[i][j] = new Big(0);\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        for (let k = i; k < n; k++) {\n            let sum = new Big(0);\n            for (let j = 0; j < i; j++) {\n                sum = sum.plus(lower[i][j].mul(upper[j][k]));\n            }\n            upper[i][k] = matrix[i][k].minus(sum);\n        }\n\n        for (let k = i; k < n; k++) {\n            if (i === k) {\n                lower[i][i] = 1;\n            } else {\n                let sum = 0;\n                for (let j = 0; j < i; j++) {\n                    sum += (lower[k][j] * upper[j][i]);\n                }\n                lower[k][i] = (matrix[k][i].minus(sum)).div(upper[i][i]);\n            }\n        }\n    }\n\n    return { lower: lower, upper: upper };\n}\n\nexport {multiplyMatrixByNumberBig, SumVectorBig, multiplyVectorByNumberBig, MultiplyMatrixByVectorBig, solveLinearEquationSystemBig}","import { transposeMatrix, MultiplyMatrix, MultiplyMatrixByVector, SumVector, multiplyVectorByNumber, solveLinearEquationSystem, multiplyMatrixByNumber, InverseMatrix, Determinant, SumMatrix, frobeniusNorm } from \"./matrix.tsx\";\nimport { Nset, Lset, Section, TemperatureBC, TemperatureBCTransitive } from \"./inpParse\"\nimport { multiplyMatrixByNumberBig, SumVectorBig, multiplyVectorByNumberBig, MultiplyMatrixByVectorBig, solveLinearEquationSystemBig } from \"./bigMatrix.ts\"\nimport { evaluateMathExpression } from \"./mathExpression.ts\"\nimport Big from 'big.js';\n\n\nconst computeTransitive = (inpData, temperature_BC, blocks_termal_conductivity, blocks_density, blocks_capacity, progress_callback, initialTemp = 0, timeStep = 0.1, steps = 500, useBig = false) => {\n\n    Big.DP = 60;\n\n    let freq = 1 / timeStep;\n\n    let K: number[][] = getConductivityMatrixTransitive(inpData, blocks_termal_conductivity);\n\n    let C: number[][] = getCapacityMatrix(inpData, blocks_density, blocks_capacity);\n\n\n    let KForF = applyTemperatureBCToKTransitive(K, inpData);\n\n\n    let F: number[] = getFForTransitive(KForF, inpData);\n\n    K = applyTemperatureBCToKTransitiveStep2(KForF, inpData);\n\n\n    if (progress_callback === null) {\n        progress_callback = (progress, data) => {\n            console.log(\"progress: \" + progress + \"%\")\n        }\n    }\n\n    let temperaturePrevStep: number[] = [];\n    let temperatureCurrentStep: number[] = [];\n\n    for (let i = 0; i < F.length; i++) {\n        temperaturePrevStep.push(initialTemp);\n    }\n    temperaturePrevStep = fixTemperatureFromBC(temperaturePrevStep, inpData, temperature_BC)\n\n    let temperatureFrames: number[][] = [];\n\n    temperatureFrames.push(temperaturePrevStep);\n\n    let progress = 0;\n\n    let realTime = 0;\n\n    if (useBig) {\n        let bigC = floatMatrixToBig(C);\n        let bigK = floatMatrixToBig(K);\n        let bigFreq = new Big(freq);\n        let bigF = floatVectorToBig(F);\n        let bigTemperaturePrevStep = floatVectorToBig(temperaturePrevStep);\n        let bigTemperatureCurrentStep: Big[] = [];\n\n        for (let t = 0; t < steps; t++) {\n\n\n            let A = multiplyMatrixByNumberBig(bigC, bigFreq)\n            let b = SumVectorBig(\n                SumVectorBig(bigF, multiplyVectorByNumberBig(\n                    MultiplyMatrixByVectorBig(bigK, bigTemperaturePrevStep), new Big(-1))),\n                multiplyVectorByNumberBig(\n                    MultiplyMatrixByVectorBig(bigC, bigTemperaturePrevStep), bigFreq))\n\n            let Temperature = solveLinearEquationSystemBig(A, b)\n\n            bigTemperatureCurrentStep = fixTemperatureFromBCBig(Temperature, inpData, temperature_BC)\n\n            let vector = BigVectorToFloat(bigTemperatureCurrentStep)\n            temperatureFrames.push(vector);\n            bigTemperaturePrevStep = bigTemperatureCurrentStep;\n\n            progress += 100 / steps\n            progress_callback(progress, vector)\n        }\n    }\n    else {\n        for (let t = 0; t < steps; t++) {\n\n            F = getFForTransitive(KForF, inpData, realTime);\n            \n\n            let A = multiplyMatrixByNumber(C, freq)\n            let b = SumVector(\n                SumVector(F, multiplyVectorByNumber(\n                    MultiplyMatrixByVector(K, temperaturePrevStep), -1)),\n                multiplyVectorByNumber(\n                    MultiplyMatrixByVector(C, temperaturePrevStep), freq))\n\n            let Temperature = solveLinearEquationSystem(A, b)\n\n            temperatureCurrentStep = fixTemperatureFromBC(Temperature, inpData, temperature_BC, realTime)\n\n            temperatureFrames.push(temperatureCurrentStep);\n            temperaturePrevStep = temperatureCurrentStep;\n\n            progress += 100 / steps\n            progress_callback(progress, temperatureCurrentStep)\n            realTime += timeStep\n        }\n    }\n\n\n    return temperatureFrames;\n\n}\n\n\nconst computeSteadyState = (inpData, temperature_BC, blocks_termal_conductivity) => {\n\n    let K = getConductivityMatrix(inpData, blocks_termal_conductivity);\n\n    K = applyTemperatureBC(K, inpData);\n\n    let F = getTermalForcesFromBC(inpData, temperature_BC);\n\n    let temperatures = fixTemperatureFromBC(solveLinearEquationSystem(K, F), inpData, temperature_BC);\n\n    return temperatures\n\n}\n\nconst floatVectorToBig = (F: number[]): Big[] => {\n    let bigF: Big[] = [];\n    for (let i = 0; i < F.length; i++) {\n        bigF[i] = new Big(F[i]);\n    }\n    return bigF;\n}\n\nconst BigVectorToFloat = (bigF: Array<Big>): number[] => {\n    let F: number[] = [];\n    for (let i = 0; i < bigF.length; i++) {\n        F[i] = bigF[i].toNumber()\n    }\n    return F;\n}\n\nconst floatMatrixToBig = (A: number[][]): Big[][] => {\n    let bigA: Big[][] = [];\n    for (let i = 0; i < A.length; i++) {\n        bigA[i] = [];\n        for (let j = 0; j < A.length; j++) {\n            bigA[i][j] = new Big(A[i][j]);\n        }\n    }\n    return bigA;\n}\n\n\nconst getTermalForcesFromBC = (inpData, temperature_BC): number[] => {\n    let length = inpData.problemData[0].nodes.length;\n\n    let F: number[] = Array(length);\n    for (let i = 0; i < length; i++) {\n        F[i] = 0;\n    }\n\n    for (let i = 0; i < temperature_BC.length; i++) {\n        let BC: TemperatureBC = temperature_BC[i];\n\n        let nodes: number[] = getNodesByAssemblySetName(BC.setName, inpData);\n\n        for (let i = 0; i < nodes.length; i++) {\n            let node: number = nodes[i];\n            F[node - 1] = BC.temperature;\n        }\n\n    }\n\n    return F;\n}\n\nconst getNodesByAssemblySetName = (setName: string, inpData): number[] => {\n\n    let nset: Nset | undefined = inpData[\"assembly\"].nsets.find((nset: Nset) => {\n        return nset.setname == setName\n    });\n    if (!nset) {\n        throw new Error(\"Set not found\")\n    }\n\n    return nset.nodes\n}\n\n\nconst applyTemperatureBC = (K: Array<Array<number>>, inpData): Array<Array<number>> => {\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            for (let i = 0; i < K.length; i++) {\n                K[node - 1][i] = 0\n            }\n            K[node - 1][node - 1] = 1\n        })\n    });\n\n\n    return K;\n}\n\nconst applyTemperatureBCToKTransitive = (K: Array<Array<number>>, inpData): Array<Array<number>> => {\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            for (let i = 0; i < K.length; i++) {\n                if (i != node - 1) {\n                    K[node - 1][i] = 0\n                }\n            }\n        })\n    });\n\n    return K;\n}\n\nconst applyTemperatureBCToKTransitiveStep2 = (K: Array<Array<number>>, inpData): Array<Array<number>> => {\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBC) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        nset.nodes.forEach((node) => {\n            for (let i = 0; i < K.length; i++) {\n                if (i != node - 1) {\n                    K[i][node - 1] = 0\n                }\n            }\n        })\n    });\n\n    return K;\n}\n\nconst getFForTransitive = (K: Array<Array<number>>, inpData, t: number = 0): number[] => {\n    let F: number[] = [];\n\n    for (let i = 0; i < K.length; i++) {\n        F.push(0);\n    }\n\n\n    inpData.steps[0].boundaries.temperature.forEach((temperature: TemperatureBCTransitive) => {\n        let setName = temperature.setName\n        let nset: Nset | undefined = inpData.assembly.nsets.find((nset: Nset) => {\n            return nset.setname == setName;\n        });\n        if (!nset) {\n            throw new Error(\"Nset not found\");\n        }\n\n        console.log(temperature.temperature)\n\n        let temp = evaluateMathExpression(temperature.temperature.toString(), t);\n\n        nset.nodes.forEach((node) => {\n            F[node - 1] = K[node - 1][node - 1] * temp;\n            for (let i = 0; i < F.length; i++) {\n                if (i != node - 1) {\n                    F[i] -= K[i][node - 1] * temp;\n                }\n            }\n        })\n    });\n\n\n    return F;\n}\n\nconst getConductivityByElement = (element: number, blocks_termal_conductivity, lsets: Lset[], sections: Section[]): number => {\n\n    let lset = lsets.find((elset) => {\n        return elset.elements.indexOf(element) != -1;\n    })\n    if (!lset) {\n        throw new Error(\"Element not in elset\");\n    }\n    let lsetName: string = lset.setname;\n    let section = sections.find((section) => {\n        return section.elsetName == lsetName\n    })\n    if (!section) {\n        throw new Error(\"Elset not in section\");\n    }\n    let sectionName = section.name;\n\n    return blocks_termal_conductivity[sectionName] ?? 0;\n}\n\nconst getDensityByElement = (element: number, blocks_density, lsets: Lset[], sections: Section[]): number => {\n\n    let lset = lsets.find((elset) => {\n        return elset.elements.indexOf(element) != -1;\n    })\n    if (!lset) {\n        throw new Error(\"Element not in elset\");\n    }\n    let lsetName: string = lset.setname;\n    let section = sections.find((section) => {\n        return section.elsetName == lsetName\n    })\n    if (!section) {\n        throw new Error(\"Elset not in section\");\n    }\n    let sectionName = section.name;\n\n    return blocks_density[sectionName] ?? 0;\n}\n\nconst getCapacityByElement = (element: number, blocks_capacity, lsets: Lset[], sections: Section[]): number => {\n\n    let lset = lsets.find((elset) => {\n        return elset.elements.indexOf(element) != -1;\n    })\n    if (!lset) {\n        throw new Error(\"Element not in elset\");\n    }\n    let lsetName: string = lset.setname;\n    let section = sections.find((section) => {\n        return section.elsetName == lsetName\n    })\n    if (!section) {\n        throw new Error(\"Elset not in section\");\n    }\n    let sectionName = section.name;\n\n    return blocks_capacity[sectionName] ?? 0;\n}\n\n\nconst getConductivityMatrixTransitive = (inpData, blocks_termal_conductivity) => {\n    let nodes = inpData.problemData[0].nodes;\n    let elements = inpData.problemData[0].elements;\n\n    let K: number[][] = new Array(nodes.length);\n    for (let i = 0; i < K.length; i++) {\n        K[i] = new Array(nodes.length).fill(0);\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n\n        let conductivity = getConductivityByElement(elements[i][0], blocks_termal_conductivity, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n\n        let conductivityMatrix = [[conductivity, 0], [0, conductivity]]\n\n\n        let Xi = nodes[elements[i][1] - 1][1];\n        let Yi = nodes[elements[i][1] - 1][2];\n\n        let Xj = nodes[elements[i][2] - 1][1];\n        let Yj = nodes[elements[i][2] - 1][2];\n\n        let Xk = nodes[elements[i][3] - 1][1];\n        let Yk = nodes[elements[i][3] - 1][2];\n\n\n        let Bi: number = Yj - Yk;\n        let Bj: number = Yk - Yi;\n        let Bk: number = Yi - Yj;\n        let Ci: number = Xk - Xj;\n        let Cj: number = Xi - Xk;\n        let Ck: number = Xj - Xi;\n\n        let Square = 0.5 * Math.abs(Xi * (Yj - Yk) + Xj * (Yk - Yi) + Xk * (Yi - Yj))\n\n        let B: number[][] = [[Bi, Bj, Bk], [Ci, Cj, Ck]];\n\n        let Ki = multiplyMatrixByNumber(MultiplyMatrix(MultiplyMatrix(transposeMatrix(B), conductivityMatrix), B), 1 / 4 * Square)\n\n        K = accumulateToGlobalMatrix(K, Ki, elements[i][1], elements[i][2], elements[i][3]);\n\n    }\n\n    return K;\n\n}\n\n\nconst getConductivityMatrix = (inpData, blocks_termal_conductivity): Array<Array<number>> => {\n\n    let nodes = inpData.problemData[0].nodes;\n    let elements = inpData.problemData[0].elements;\n\n    let K: number[][] = new Array(nodes.length);\n    for (let i = 0; i < K.length; i++) {\n        K[i] = new Array(nodes.length).fill(0);\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n\n        let conductivity = getConductivityByElement(elements[i][0], blocks_termal_conductivity, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n        let R: number[][] = [[], [], []];\n        for (let j = 1; j <= 3; j++) {\n            R[j - 1] = [nodes[elements[i][j] - 1][1], nodes[elements[i][j] - 1][2]];\n        }\n\n        R = transposeMatrix(R);\n\n        let Ki = getLocalCondictivityMatrix(R, conductivity);\n        K = accumulateToGlobalMatrix(K, Ki, elements[i][1], elements[i][2], elements[i][3]);\n\n    }\n\n    return K;\n}\n\nconst getCapacityMatrix = (inpData, blocks_density, blocks_capacity): Array<Array<number>> => {\n\n    let nodes = inpData.problemData[0].nodes;\n    let elements = inpData.problemData[0].elements;\n\n    let C: number[][] = new Array(nodes.length);\n    for (let i = 0; i < C.length; i++) {\n        C[i] = new Array(nodes.length).fill(0);\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n\n\n        let density = getDensityByElement(elements[i][0], blocks_density, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n        let capacity = getCapacityByElement(elements[i][0], blocks_capacity, inpData.problemData[0].lsets, inpData.problemData[0].sections);\n        let coords: number[][] = [\n            [nodes[elements[i][1] - 1][1], nodes[elements[i][1] - 1][2]],\n            [nodes[elements[i][2] - 1][1], nodes[elements[i][2] - 1][2]],\n            [nodes[elements[i][3] - 1][1], nodes[elements[i][3] - 1][2]]\n\n        ]\n\n        let Ci = getLocalCapacityMatrix(coords, density, capacity);\n        C = accumulateToGlobalMatrix(C, Ci, elements[i][1], elements[i][2], elements[i][3]);\n\n    }\n\n    return C;\n}\n\nconst getLocalCondictivityMatrix = (coords: number[][], Lambda: number) => {\n\n    let J = [\n        [coords[0][2] - coords[0][0], coords[1][2] - coords[1][0]],\n        [coords[0][1] - coords[0][0], coords[1][1] - coords[1][0]]\n    ];\n\n    let Bnat = [\n        [-1, 0, 1],\n        [-1, 1, 0]\n    ];\n\n    let B = MultiplyMatrix(InverseMatrix(J), Bnat);\n    return MultiplyMatrix(multiplyMatrixByNumber(transposeMatrix(B), Lambda), multiplyMatrixByNumber(B, Determinant(J) / 2));\n}\n\nconst calculateTriangleArea = (coordinates: number[][]): number => {\n    const [point1, point2, point3] = coordinates;\n\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    const [x3, y3] = point3;\n\n    const area = 0.5 * Math.abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n\n    return area;\n}\n\nconst getLocalCapacityMatrix = (coords: number[][], density: number, capacity: number): number[][] => {\n\n    let Xi = coords[0][0];\n    let Yi = coords[0][1];\n\n    let Xj = coords[1][0];\n    let Yj = coords[1][1];\n\n    let Xk = coords[2][0];\n    let Yk = coords[2][1];\n\n    let square = 0.5 * Math.abs(Xi * (Yj - Yk) + Xj * (Yk - Yi) + Xk * (Yi - Yj))\n\n\n    return multiplyMatrixByNumber([\n        [2, 1, 1],\n        [1, 2, 1],\n        [1, 1, 2],\n    ], density * capacity / 12 * square)\n\n}\n\nconst accumulateToGlobalMatrix = (globalMatrix: Array<Array<number>>, localMatrix: Array<Array<number>>, i: number, j: number, k: number): Array<Array<number>> => {\n\n    i--\n    j--\n    k--\n\n    globalMatrix[i][i] += localMatrix[0][0]\n    globalMatrix[j][j] += localMatrix[1][1]\n    globalMatrix[k][k] += localMatrix[2][2]\n\n    globalMatrix[i][j] += localMatrix[0][1]\n    globalMatrix[j][i] += localMatrix[1][0]\n\n    globalMatrix[i][k] += localMatrix[0][2]\n    globalMatrix[k][i] += localMatrix[2][0]\n\n    globalMatrix[j][k] += localMatrix[1][2]\n    globalMatrix[k][j] += localMatrix[2][1]\n\n    return globalMatrix;\n}\n\nconst fixTemperatureFromBC = (temperature: number[], inpData, temperature_BC, t:number =0): number[] => {\n\n    for (let i = 0; i < temperature_BC.length; i++) {\n        let BC: TemperatureBCTransitive = temperature_BC[i];\n\n        let nodes: number[] = getNodesByAssemblySetName(BC.setName, inpData);\n\n        let temp = evaluateMathExpression(BC.temperature.toString(),t);\n\n        for (let i = 0; i < nodes.length; i++) {\n            let node: number = nodes[i];\n            temperature[node - 1] = temp;\n        }\n\n    }\n\n    return temperature\n}\n\nconst fixTemperatureFromBCBig = (temperature: Big[], inpData, temperature_BC): Big[] => {\n\n    for (let i = 0; i < temperature_BC.length; i++) {\n        let BC: TemperatureBC = temperature_BC[i];\n\n        let nodes: number[] = getNodesByAssemblySetName(BC.setName, inpData);\n\n        for (let i = 0; i < nodes.length; i++) {\n            let node: number = nodes[i];\n            temperature[node - 1] = new Big(BC.temperature);\n        }\n\n    }\n\n    return temperature\n}\n\n\nexport { computeSteadyState, computeTransitive }","import {computeTransitive} from \"./computeHeatTransfer.tsx\"\n\nonmessage = function(event) {\n\n    let inpData = event.data.inpData\n    let temperature_BC = event.data.temperature_BC\n    let blocks_termal_conductivity = event.data.blocks_termal_conductivity\n    let blocks_density = event.data.blocks_density\n    let blocks_specific_heat = event.data.blocks_specific_heat\n    let initialTemp = event.data.initialTemp\n    let stepIncrement = event.data.stepIncrement\n    let steps = event.data.steps\n    \n    try{\n        var result = computeTransitive(inpData, temperature_BC, blocks_termal_conductivity, blocks_density, blocks_specific_heat, callback, initialTemp,stepIncrement, steps);\n    }\n    catch(e){\n        postMessage({ action: \"error\", result: e});    \n    }\n    postMessage({ action: \"done\", result: result});\n};\n\n\nconst callback = (progress, data) => {\n    postMessage({action: \"progress\", result: progress, temp: data});\n}","import {parseCSV, interpolateMap} from \"./table.ts\"\n\n\nconst evaluateMathExpression = (expression: string, t: number): number => {\n\n    const lines = expression.split(\"\\n\");\n\n    if(lines.length > 2 && lines[0].includes(\",\")){\n        const tableData = parseCSV(expression)        \n        const value = interpolateMap(tableData, t);\n\n        return value\n    }\n\n    expression = expression.replace(/t\\^(\\d+)/g, 'Math.pow(t, $1)');\n    expression = expression.replace(/sin/g, 'Math.sin');\n    expression = expression.replace(/cos/g, 'Math.cos');\n\n    const result: number = eval(expression);\n\n    \n    return result;\n}\n\nexport {evaluateMathExpression};","const parseCSV = (csvData: string) => {\n\n    const lines = csvData.split(\"\\n\");\n    const result = [];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [time, temperature] = lines[i].split(\",\");\n        result[parseFloat(time)] = parseFloat(temperature);\n    }\n\n    return result;\n}\n\n\ntype ValueMap<T> = { [key: string]: T };\n\nfunction interpolateMap<T>(map: ValueMap<T>, value: number): T {\n\n\n  const sortedKeys = Object.keys(map).sort((a, b) => a - b);\n  const firstValue = map[sortedKeys[0]];\n\n  if(value <= 0 || value <= parseFloat(sortedKeys[0]) ){\n    return firstValue;\n  }\n  \n  const keys = Object.keys(map).map((k) => parseFloat(k));\n  const lowerKey = keys.find((k) => k <= value);\n  const upperKey = keys.find((k) => k >= value);\n\n  if (lowerKey === undefined) {\n    return map[keys[0]];\n  } else if (upperKey === undefined) {\n    return map[keys[keys.length - 1]];\n  }\n\n  const lowerValue = map[lowerKey];\n  const upperValue = map[upperKey];\n  const weight = (value - lowerKey) / (upperKey - lowerKey);\n\n  return (1 - weight) * lowerValue + weight * upperValue;\n}\n\n\n\nexport {parseCSV, interpolateMap}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [443], () => (__webpack_require__(6)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"e95e3585\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t6: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkheat_transfer\"] = self[\"webpackChunkheat_transfer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(443).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["transposeMatrix","matrix","transposedMatrix","i","length","j","push","SumVector","A","B","C","Array","MultiplyMatrix","rows1","cols1","cols2","Error","sum","k","MultiplyMatrixByVector","v","rows","cols","result","multiplyMatrixByNumber","number","multiplyVectorByNumber","luDecomposition","n","lower","upper","solveLinearEquationSystem","b","LU","y","x","multiplyMatrixByNumberBig","mul","SumVectorBig","plus","multiplyVectorByNumberBig","MultiplyMatrixByVectorBig","Big","solveLinearEquationSystemBig","luDecompositionBig","minus","div","floatVectorToBig","F","bigF","BigVectorToFloat","toNumber","floatMatrixToBig","bigA","getNodesByAssemblySetName","setName","inpData","nset","nsets","find","setname","nodes","applyTemperatureBCToKTransitive","K","steps","boundaries","temperature","forEach","assembly","node","applyTemperatureBCToKTransitiveStep2","getFForTransitive","t","arguments","undefined","console","log","temp","evaluateMathExpression","toString","getConductivityByElement","element","blocks_termal_conductivity","lsets","sections","_blocks_termal_conduc","lset","elset","elements","indexOf","lsetName","section","elsetName","name","getDensityByElement","blocks_density","_blocks_density$secti","getCapacityByElement","blocks_capacity","_blocks_capacity$sect","getConductivityMatrixTransitive","problemData","fill","conductivity","conductivityMatrix","Xi","Yi","Xj","Yj","Xk","Yk","Bi","Bj","Bk","Ci","Cj","Ck","Square","Math","abs","Ki","accumulateToGlobalMatrix","getCapacityMatrix","density","capacity","coords","getLocalCapacityMatrix","square","globalMatrix","localMatrix","fixTemperatureFromBC","temperature_BC","BC","fixTemperatureFromBCBig","onmessage","event","data","blocks_specific_heat","initialTemp","stepIncrement","progress_callback","timeStep","useBig","DP","freq","KForF","progress","temperaturePrevStep","temperatureCurrentStep","temperatureFrames","realTime","bigC","bigK","bigFreq","bigTemperaturePrevStep","bigTemperatureCurrentStep","Temperature","vector","computeTransitive","callback","e","postMessage","action","expression","lines","split","includes","tableData","parseCSV","value","interpolateMap","replace","eval","csvData","time","parseFloat","map","sortedKeys","Object","keys","sort","a","firstValue","lowerKey","upperKey","lowerValue","upperValue","weight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}