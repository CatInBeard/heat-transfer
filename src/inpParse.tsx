class InpParsingError extends Error {
    constructor(message: string = "Parsing .inp error") {
        super(message);
        this.name = 'InpParsingError';
    }
}

const parseInpText = (inpTextData: string) => {

    let inpDataLines: Array<string> = clearCR(inpTextData).split("\n");
    
    let inpData = [];
    inpData["heading"] = getHeadings(inpDataLines);
    

    return inpData;
}

const clearCR = (text: string) : string => {
    return text.replace(/\r/g, "");
}

const getHeadings = (inpDataLines: Array<string>) => {
    
    checkHeading(inpDataLines);

    const lines = findHeadingLines(inpDataLines);
    const {jobName, modelName} = getJobAndModelName(inpDataLines, lines.jobNameLine);
    const generatedBy = getGeneratedBy(inpDataLines, lines.generatedByLine);

    return { jobName: jobName, modelName: modelName, generatedBy: generatedBy }
}

const checkHeading = (inpDataLines: Array<string>) => {
    if (!inpDataLines[0].startsWith("*Heading")) {
        throw new InpParsingError("Heading is not defined");
    }
}

const findHeadingLines = (inpDataLines: Array<string>) => {
    let inpDataLinesCount: number = inpDataLines.length;
    let jobNameLine: number = 0;
    let generatedByLine: number = 0;

    for(let i = 0; i< inpDataLinesCount; i++){
        if(inpDataLines[i].startsWith("** Job name:")){
            jobNameLine = i;
        }
        if(inpDataLines[i].startsWith("** Generated by:")){
            generatedByLine = i;
        }

        if(jobNameLine != 0 && generatedByLine != 0){
            break;
        }
    }

    if(jobNameLine == 0 || generatedByLine == 0){
        throw new Error("Heading parsing error");
    }

    return {jobNameLine:jobNameLine, generatedByLine:generatedByLine}
}

const getJobAndModelName = (inpDataLines: Array<string>, jobNameLine: number) => {
    
    const regex: RegExp = /Job name: (.*?) Model name: (.*?)$/;
    const matches: RegExpMatchArray | null = inpDataLines[jobNameLine].match(regex);

    if (matches && matches.length === 3) {
        var jobName: string = matches[1];
        var modelName: string = matches[2];
    } else {
        throw new Error("Job name or model name not found!");
    }
    return {jobName: jobName, modelName: modelName}
}

const getGeneratedBy = (inpDataLines: Array<string>, generatedByLine: number) => {
    const regexGenBy: RegExp = /Generated by: (.*?)$/;

    const match: RegExpMatchArray | null = inpDataLines[generatedByLine].match(regexGenBy);

    if (match && match.length === 2) {
        var generatedBy = match[1];
    } else {
        throw new Error("Generated by not found");
    }
    return generatedBy;
}


export { parseInpText, InpParsingError }